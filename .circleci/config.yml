# Python CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

executors:
  # Define a parameterized executor which accepts two parameters to choose the python
  # version which will be used for the docker image and the tox actions.
  venv_tester:
    working_directory: ~/repo
    parameters:
      tag:
        type: string
        default: "3.10"
    docker:
      - image: cimg/python:<< parameters.tag >>
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
  conda_tester:
    working_directory: ~/repo
    docker:
      - image: cimg/base:2021.04
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
  gh_releaser:
    working_directory: ~/repo
    docker:
      - image: cimg/base:2021.04
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS

commands:
  create_folders:
    description: "Checkout code and prepare test results location."
    steps:
    - checkout
    - run:
        name: Create test result folder
        command: |
          mkdir test-results

  create_venv:
    description: "Prepare virtual environment."
    parameters:
      pyenv:
        type: string
        default: "py310"
    steps:
    - run:
        name: Create virtual environment
        command: |
          python3 -m venv << parameters.pyenv >>
          source << parameters.pyenv >>/bin/activate
          pip install --upgrade pip==21.3.0 pip-tools

  install_deps:
    description: "Install dependencies."
    parameters:
      pyenv:
        type: string
        default: "py310"
    steps:

    - run:
        name: Install dependencies
        command: |
          source << parameters.pyenv >>/bin/activate
          python -m piptools sync requirements/requirements.txt requirements/requirements-dev.txt

  execute_nbval:
    description: "Execute pytest with nbval plugin."
    parameters:
      pyenv:
        type: string
    steps:
    - run:
        name: Perform pytest --nbval testing
        no_output_timeout: 30m
        command: |
          source << parameters.pyenv >>/bin/activate
          pytest --nbval --current-env --sanitize-with nbval_sanitization | \
            tee --append test-results/pytest.log

  store_results:
    description: "Store test results and artifacts."
    steps:
    - store_artifacts:
        path: test-results
        destination: test-results
    - store_test_results:
        path: test-results

workflows:

  test:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - test:
          name: "test_python37"
          tag: "3.7"
          pyenv: "py37"
          context:
            - Docker pulling as bludoc
      - test:
          name: "test_python38"
          tag: "3.8"
          pyenv: "py38"
          context:
            - Docker pulling as bludoc
      - test:
          name: "test_python39"
          tag: "3.9"
          pyenv: "py39"
          context:
            - Docker pulling as bludoc
      - test:
          name: "test_python310"
          tag: "3.10"
          pyenv: "py310"
          context:
            - Docker pulling as bludoc
      - test_conda310:
          context:
            - Docker pulling as bludoc

jobs:
  # Define one 'test' job with parameters to deal with all desired cases and one
  # Anaconda test job. The reason for this is the desire to ensure the following for
  # all supported Python versions referring to the docs: all notebooks are
  # guaranteed to produce the same output as they contain, no matter if run with
  # Python built-in venv or the Anaconda interpreter.
  test:
    # Define all parameters, where 'tag' is used for the docker image and 'pyenv' is
    # the string which is used to identify the current Python version. We reuse
    # this variable basically everywhere we deal with the virtual environment.
    parameters:
      tag:
        type: string
        default: "3.10"
      pyenv:
        type: string
        default: "py310"

    executor:
      name: venv_tester
      tag: << parameters.tag >>

    steps:
      - create_folders
      - create_venv:
          pyenv: << parameters.pyenv >>
      - install_deps:
          pyenv: << parameters.pyenv >>

      - execute_nbval:
          pyenv: << parameters.pyenv >>

      - store_results

  test_conda310:

    executor: conda_tester

    steps:
      - create_folders
      - run:
          name: Install Miniconda
          command: |
            wget "https://repo.anaconda.com/miniconda/\
            Miniconda3-latest-Linux-x86_64.sh" -O $HOME/miniconda.sh
            mkdir -p $HOME/.conda
            bash $HOME/miniconda.sh -b -p /home/circleci/conda
            source $HOME/conda/etc/profile.d/conda.sh
            hash -r
            conda config --set always_yes yes --set changeps1 no
            conda update -q conda
            echo 'export PATH=$HOME/conda/bin:$PATH' >> $BASH_ENV

      # Download and cache dependencies.
      - restore_cache:
          keys:
            # Specify the unique identifier for the cache.
            - v3-conda-dependencies-{{ checksum "requirements/environment.yml" }}-{{checksum "requirements/requirements.txt" }}-{{ checksum "requirements/requirements-dev.txt" }}
            # Fallback to using the latest cache if no exact match is found.
            - v3-conda-dependencies-

      # Create environment and install extra_requires dependencies manually.
      - run:
          name: Create or update environment
          command: |
            if [ -d "$HOME/conda/envs/" ]; then
                conda env update --prune --file requirements/environment.yml
            else
                conda env create -f requirements/environment.yml
            fi
            source $HOME/conda/etc/profile.d/conda.sh
            conda activate PyDynamic_tutorials
            pip install -r requirements/requirements-dev.txt

      - save_cache:
          paths:
            - /home/circleci/conda/envs/
          key: >-
            v3-conda-dependencies-{{ checksum "requirements/environment.yml" }}-{{ checksum "requirements/requirements.txt" }}-{{ checksum "requirements/requirements-dev.txt" }}

      # Run tests! We use pytest's test-runner.
      - run:
          name: Run tests
          no_output_timeout: 30m
          command: |
            source $HOME/conda/etc/profile.d/conda.sh
            conda activate PyDynamic_tutorials
            pytest --nbval --nbval-current-env \
              --nbval-sanitize-with nbval_sanitization | \
              tee --append test-results/pytest.log

      - store_results